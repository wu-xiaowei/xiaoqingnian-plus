(window.webpackJsonp=window.webpackJsonp||[]).push([[466],{770:function(a,s,n){"use strict";n.r(s);var t=n(4),e=Object(t.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"抱歉-我不用别的测试工具了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抱歉-我不用别的测试工具了"}},[a._v("#")]),a._v(" 抱歉，我不用别的测试工具了！")]),a._v(" "),s("blockquote",[s("p",[a._v("本文作者："),s("a",{attrs:{href:"https://yuyuanweb.feishu.cn/wiki/Abldw5WkjidySxkKxU2cQdAtnah",target:"_blank",rel:"noopener noreferrer"}},[a._v("程序员鱼皮"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("本站地址："),s("a",{attrs:{href:"https://codefather.cn",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://codefather.cn"),s("OutboundLink")],1)])]),a._v(" "),s("p",[a._v("大家好，我是鱼皮。")]),a._v(" "),s("p",[a._v("大多数后端开发程序员的工作都是写接口（服务），比如 HTTP、RPC 等等，供前端或其他系统来调用。写接口的过程中必然会考虑两个问题：")]),a._v(" "),s("ol",[s("li",[a._v("如何对接口进行测试，保证接口质量？")]),a._v(" "),s("li",[a._v("如何搞出接口文档，减少沟通成本？")])]),a._v(" "),s("p",[a._v("先说说测试，一般情况下，除了本地对某个方法进行单元测试外，我们还要用 curl、postman 等工具来发送请求进行接口测试，但需要手动编写请求的信息，比较麻烦。")]),a._v(" "),s("p",[a._v("再说说接口文档，说白了，就是要以书面的形式介绍你接口的功能、地址、调用方法、请求参数、响应结构、细节等等，从而明确接口的信息，推动合作。但手动编写接口文档无疑会消耗大量的时间，因此很多时候，大家选择口口相传，开局一张嘴，正确与否全靠脸。")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311090914141.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("那有没有什么方法，可以自动帮助我们生成接口文档，并且不用手动编写请求信息就能测试呢？")]),a._v(" "),s("p",[a._v("当然有！Swagger 就是这样一款知名的接口文档生成工具，相信学 Java 的朋友对它不会陌生。")]),a._v(" "),s("blockquote",[s("p",[a._v("地址：https://swagger.io/")])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311090914179.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("它支持多种编程语言，且用法异常简单！以 Java SpringBoot 项目为例，只需要先在项目中引入它的 SDK，Maven 项目参考代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger2</artifactId>\n  <version>2.9.2</version>\n</dependency>\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger-ui</artifactId>\n  <version>2.9.2</version>\n</dependency>\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("p",[a._v("然后编写一个 Java Bean 来定义 Swagger 的配置，包括作者名、文档名称、自动生成的接口所在路径等，参考代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@Configuration\n@EnableSwagger2WebMvc\n// 生产环境记得关闭哦\n@Profile({"dev", "test"})\npublic class SwaggerConfig {\n\n  @Bean\n  public Docket createRestApi() {\n    return new Docket(DocumentationType.SWAGGER_2)\n      .apiInfo(apiInfo())\n      .select()\n      .apis(RequestHandlerSelectors.basePackage("包名"))\n      .paths(PathSelectors.any())\n      .build();\n  }\n\n  private ApiInfo apiInfo() {\n    return new ApiInfoBuilder()\n      .title("Swagger Document")\n      .version("0.0.1")\n      .build();\n  }\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br")])]),s("p",[a._v('然后，直接启动项目，就能自动生成一份美观的接口文档了。默认地址记得是 "/接口前缀/doc.html"，在浏览器中访问这个地址，就能看到文档页面了：')]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311090914118.png",loading:"lazy"}})]),a._v(" "),s("blockquote",[s("p",[a._v("Swagger 接口文档")])]),a._v(" "),s("p",[a._v("默认的皮肤虽然简洁，但不太好看，我们可以使用开源项目 Knife4j 来增强 Swagger 文档的默认功能，直接打开官方文档，跟着快速开始的步骤引入即可，一分钟左右就能完成！")]),a._v(" "),s("blockquote",[s("p",[a._v("地址：https://doc.xiaominfo.com/knife4j/")])]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311090914160.png",loading:"lazy"}})]),a._v(" "),s("blockquote",[s("p",[a._v("Knife4j 文档")])]),a._v(" "),s("p",[a._v("最终可以得到比 Swagger 功能更强、更方便的接口文档页面：")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311090914224.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("在文档中，你不仅可以看到接口的详细信息，还可以一键发送请求，对接口进行测试！一般情况下，拿来代替独立的接口测试工具完全足够了：")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311090914210.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v('是不是非常方便呢？如果对这些 UI 不满意，你可以使用 Swagger 提供的获取接口信息的 API（比如 "xxx/v2/api-docs"），自己改造界面。')]),a._v(" "),s("p",[a._v("如今的 Swagger 功能也是越发强大了，除了用它来生成接口文档外，你甚至可以反过来，先定义好接口的信息，再根据接口去生成后台代码！")]),a._v(" "),s("p",[a._v("比如直接在官方提供的 "),s("code",[a._v("Swagger Editor")]),a._v(" 里写好接口的 json 配置，然后一键就能生成主流后端语言的服务端和客户端代码了，六的一批！")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311090914233.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("除了后端代码外，一些前端框架还支持读取 Swagger 的配置信息来自动生成代码。")]),a._v(" "),s("p",[a._v("比如 Ant Design Pro，填上 Swagger 的 api 地址，再输入一行命令，就能生成接口代码、测试和 mock 文件等，是不是绝了？！")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311090914207.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("当然，以上的内容更适用于开发同学。如果你是专业的测试人员，相信你会用到一些功能更丰富的自动化测试、压力测试工具，欢迎在评论区留言分享哦～")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("以上就是本期分享，有帮助的话还请给鱼皮一个 "),s("strong",[a._v("点赞 + 在看")]),a._v(" ，谢谢大家！")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311090914287.png",loading:"lazy"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);