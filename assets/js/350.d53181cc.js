(window.webpackJsonp=window.webpackJsonp||[]).push([[350],{656:function(s,a,n){"use strict";n.r(a);var t=n(4),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"快速部署微服务项目-保姆级教程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速部署微服务项目-保姆级教程"}},[s._v("#")]),s._v(" 快速部署微服务项目，保姆级教程")]),s._v(" "),a("blockquote",[a("p",[s._v("本文作者："),a("a",{attrs:{href:"https://yuyuanweb.feishu.cn/wiki/Abldw5WkjidySxkKxU2cQdAtnah",target:"_blank",rel:"noopener noreferrer"}},[s._v("程序员鱼皮"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("本站地址："),a("a",{attrs:{href:"https://codefather.cn",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://codefather.cn"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("大家好，我是鱼皮。")]),s._v(" "),a("p",[s._v("项目上线是每位学编程同学必须掌握的基本技能。之前我已经给大家分享过很多种上线单体项目的方法了，今天再出一期微服务项目的部署教程，用一种最简单的方法，带大家轻松部署微服务项目。")]),s._v(" "),a("p",[s._v("开始之前，先做个小调研啊，大家更喜欢看 “真实踩坑版” 的教程还是 “压缩纯净版” 的教程呢？")]),s._v(" "),a("p",[s._v("本期教程我还是保持自己一贯的风格，依然是保姆级教程，包含了一些踩坑过程和解决方案，大家跟着做就完事儿~")]),s._v(" "),a("blockquote",[a("p",[s._v("更推荐看视频版：https://www.bilibili.com/video/BV1Cp4y1F7eA/")])]),s._v(" "),a("h2",{attrs:{id:"项目介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目介绍"}},[s._v("#")]),s._v(" 项目介绍")]),s._v(" "),a("p",[s._v("这次的教程以我带大家全程直播手把手开发的、基于 Spring Cloud + Docker 代码沙箱的 "),a("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&mid=2247549858&idx=1&sn=dee63c9111558c81b8ee8921f871ea6f&chksm=e9c2e455deb56d43d79e01c5ff310487fb66e16baef27f664e43a0e8779abd6506194fc216aa&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[s._v("在线判题系统"),a("OutboundLink")],1),s._v(" 为例，进行演示。")]),s._v(" "),a("p",[s._v("这个项目的核心功能是让用户能够在线选题和做题，然后由系统自动判题：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928283.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("项目用到的核心依赖包括：MySQL 数据库、Redis 缓存、RabbitMQ 消息队列、Nacos 注册中心")]),s._v(" "),a("p",[s._v("涉及的核心服务包括：用户服务、题目服务、判题服务（代码沙箱）、Gateway 网关服务")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928469.png",loading:"lazy"}})]),s._v(" "),a("h2",{attrs:{id:"传统部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统部署"}},[s._v("#")]),s._v(" 传统部署")]),s._v(" "),a("p",[s._v("对于这样一个项目，如果我们还用传统单机项目的部署方式，一个个打 jar 包、用 Java 命令来启动，会有哪些问题呢？")]),s._v(" "),a("ol",[a("li",[s._v("要一个个安装依赖，比如 MySQL 数据库、Redis、消息队列、Nacos，非常麻烦！")]),s._v(" "),a("li",[s._v("要一个个打 jar 包、一个个手动运行 jar 包，非常麻烦！")]),s._v(" "),a("li",[s._v("不方便集中观察所有服务的运行状态和资源占用情况")])]),s._v(" "),a("p",[s._v("所以，为了解决这些问题，我们会选用一种更高效的微服务部署方式 —— Docker Compose。")]),s._v(" "),a("h2",{attrs:{id:"docker-compose-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-介绍"}},[s._v("#")]),s._v(" Docker Compose 介绍")]),s._v(" "),a("p",[s._v("在介绍 Docker Compose 前，先简单介绍下 Docker。")]),s._v(" "),a("p",[s._v("Docker 是一种容器技术，允许开发者将应用程序和所有依赖项（如代码、库、配置等）制作为 "),a("code",[s._v("镜像")]),s._v("。可以把镜像简单理解为软件安装包，可以在不同的计算机上通过它快速安装和启动应用程序（容器），这些程序独立隔离地运行，不受外部环境的影响。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928039.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("如果要部署微服务项目，可能要启动多个 Docker 容器，比如 MySQL 容器、用户服务容器等。这时就需要 Docker Compose 了。它是一个容器编排助手，用于集中管理多个 Docker 容器的启动和协同工作。可以在一个配置文件中集中定义所有容器以及它们的关系。然后，可以使用一行命令启动所有容器，而不需要手动运行多个命令。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928296.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("需要注意的是，Docker Compose 通常适用于把所有微服务部署在同一台服务器的场景，在真实的企业级项目中，往往会使用 K8S 等更专业的容器编排和自动化部署工具，更方便地在多个服务器上部署容器。")]),s._v(" "),a("h2",{attrs:{id:"部署流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署流程"}},[s._v("#")]),s._v(" 部署流程")]),s._v(" "),a("p",[s._v("了解了 Docker 和 Docker Compose 的作用后，我们来快速了解下部署流程，分为 2 大阶段 —— 本地部署和服务器部署。")]),s._v(" "),a("p",[s._v("一、本地部署")]),s._v(" "),a("ol",[a("li",[s._v("梳理服务部署表格")]),s._v(" "),a("li",[s._v("Maven 子父模块打包")]),s._v(" "),a("li",[s._v("Dockerfile 编写")]),s._v(" "),a("li",[s._v("编写环境依赖配置")]),s._v(" "),a("li",[s._v("编写服务配置")]),s._v(" "),a("li",[s._v("调整程序配置")]),s._v(" "),a("li",[s._v("测试访问")])]),s._v(" "),a("p",[s._v("二、服务端部署")]),s._v(" "),a("ol",[a("li",[s._v("准备服务器")]),s._v(" "),a("li",[s._v("Docker Compose 安装")]),s._v(" "),a("li",[s._v("同步文件")]),s._v(" "),a("li",[s._v("获取 jar 包")]),s._v(" "),a("li",[s._v("服务启动")]),s._v(" "),a("li",[s._v("测试访问")])]),s._v(" "),a("h2",{attrs:{id:"一、本地部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、本地部署"}},[s._v("#")]),s._v(" 一、本地部署")]),s._v(" "),a("p",[s._v("第一阶段是本地部署，也可以叫做部署准备。")]),s._v(" "),a("p",[s._v("强烈建议大家，比起直接操作线上服务器，最好是先在本地把所有的流程跑通，风险更低、效率更高。")]),s._v(" "),a("p",[s._v("这里我使用的是 Mac 操作系统，已经安装了 Docker Desktop 软件，管理 Docker 容器会更方便一些。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928427.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("对于本地没有 Docker 环境的同学，这一阶段仔细看一遍有个印象就足够了。可以直接拿我调试好的配置文件在服务器上部署，而不用自己调试。")]),s._v(" "),a("p",[s._v("怎么样，够贴心吧！可以叫我 “保姆鱼皮”，简称 “保姆皮”。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928290.png",loading:"lazy"}})]),s._v(" "),a("h3",{attrs:{id:"_1-1、梳理服务部署表格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、梳理服务部署表格"}},[s._v("#")]),s._v(" 1.1、梳理服务部署表格")]),s._v(" "),a("p",[s._v("在部署微服务项目前，首先要规划好要部署哪些服务、以及各服务的关键信息，比如服务名称、版本号、占用端口号、关键配置等。")]),s._v(" "),a("p",[s._v("对于我的在线判题项目，梳理好的服务表格如下：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[s._v("服务名称")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("英文名")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("端口号")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("版本号")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("服务类别")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("数据库")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("mysql")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("3306")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("v8")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("环境依赖")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("缓存")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("redis")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("6379")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("v6")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("环境依赖")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("消息队列")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("rabbitmq")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("5672, 15672")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("v3.12.6")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("环境依赖")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("注册中心")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("nacos")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("8848")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("v2.2.0")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("环境依赖")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("网关服务")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("gateway")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("8101")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("java 8")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("业务服务")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("用户服务")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("yuoj-backend-user-service")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("8102")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("java 8")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("业务服务")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("题目服务")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("yuoj-backend-question-service")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("8103")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("java 8")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("业务服务")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("判题服务")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("yuoj-backend-judge-service")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("8104")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("java 8")]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("业务服务")])])])]),s._v(" "),a("p",[s._v("为什么这里我要划分服务类别为 “环境依赖” 和 “业务服务” 呢？")]),s._v(" "),a("p",[s._v("因为在启动服务时，必须要先启动环境依赖，才能启动业务服务，否则就会报类似 “无法连接数据库” 之类的错误。")]),s._v(" "),a("h3",{attrs:{id:"_1-2、maven-子父模块打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、maven-子父模块打包"}},[s._v("#")]),s._v(" 1.2、Maven 子父模块打包")]),s._v(" "),a("p",[s._v("对于微服务项目，我们通常是使用 Maven 的子父模块功能进行管理的。需要部署项目时，不用针对每个子服务单独执行 "),a("code",[s._v("mvn package")]),s._v(" 命令进行打包，而是可以一键打包所有服务。")]),s._v(" "),a("p",[s._v("想要实现这个功能，需要给子父模块的依赖文件（pom.xml）进行一些配置，主要包括：")]),s._v(" "),a("h4",{attrs:{id:"_1-父模块配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-父模块配置"}},[s._v("#")]),s._v(" 1）父模块配置")]),s._v(" "),a("p",[s._v("在父模块的 pom.xml 文件中引入 "),a("code",[s._v("spring-boot-maven-plugin")]),s._v(" 即可，注意一定不要配置 configuration 和 repackage！")]),s._v(" "),a("p",[s._v("示例代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <version>${spring-boot.version}</version>\n</plugin>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"_2-子模块配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-子模块配置"}},[s._v("#")]),s._v(" 2）子模块配置")]),s._v(" "),a("p",[s._v("修改所有需要启动 Spring Boot 的服务（用户服务、题目服务、判题服务、网关服务）的子模块 pom.xml 文件。")]),s._v(" "),a("p",[s._v("主要是增加 executions 配置，使用 spring-boot-maven-plugin 的 repackage 命令来构建子模块，从而自动在构建时将公共模块的依赖打入 jar 包。")]),s._v(" "),a("p",[s._v("示例代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n    <executions>\n        <execution>\n            <id>repackage</id>\n            <goals>\n                <goal>repackage</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"_1-3、dockerfile-编写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3、dockerfile-编写"}},[s._v("#")]),s._v(" 1.3、Dockerfile 编写")]),s._v(" "),a("p",[s._v("Dockerfile 是定义 Docker 容器镜像构建过程的文件，包括容器镜像使用的基础环境、容器内的依赖和文件、容器的配置、启动命令等。")]),s._v(" "),a("p",[s._v("有了 Dockerfile，我们就能很轻松地制作出自己的容器镜像。")]),s._v(" "),a("p",[s._v("虽然 Dockerfile 的写法并不复杂，但我还是建议大家尽量不要自己写，直接去网上找个差不多的项目，复制粘贴别人的 Dockerfile 就足够了！")]),s._v(" "),a("p",[s._v("这里鱼皮给大家提供 2 种常用的 Spring Boot 项目的 Dockerfile。")]),s._v(" "),a("h4",{attrs:{id:"_1-复制-jar-包版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-复制-jar-包版"}},[s._v("#")]),s._v(" 1）复制 jar 包版")]),s._v(" "),a("p",[s._v("思路：在本地打好 jar 包后，复制 jar 包到容器中运行")]),s._v(" "),a("p",[s._v("示例代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 基础镜像\nFROM openjdk:8-jdk-alpine\n\n# 指定工作目录\nWORKDIR /app\n\n# 将 jar 包添加到工作目录，比如 target/yuoj-backend-user-service-0.0.1-SNAPSHOT.jar\nADD {本地 jar 包路径} . \n\n# 暴露端口\nEXPOSE {服务端口号}\n\n# 启动命令\nENTRYPOINT ["java","-jar","/app/{jar 包名称}","--spring.profiles.active=prod"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h4",{attrs:{id:"_2-maven-打包版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-maven-打包版"}},[s._v("#")]),s._v(" 2）Maven 打包版")]),s._v(" "),a("p",[s._v("思路：复制本地代码到容器中，在容器中使用 Maven 打包再运行")]),s._v(" "),a("p",[s._v("示例代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 基础镜像\nFROM maven:3.8.1-jdk-8-slim as builder\n\n# 指定工作目录\nWORKDIR /app\n\n# 添加源码文件\nCOPY pom.xml .\nCOPY src ./src\n\n# 构建 jar 包，跳过测试\nRUN mvn package -DskipTests\n\n# 启动命令\nENTRYPOINT ["java","-jar","/app/target/{jar 包名称}","--spring.profiles.active=prod"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("此处由于我们的微服务项目可以一键打好所有子服务的 jar 包，就没必要每个服务单独在容器中打包了，所以选择第一种方式的 Dockerfile。")]),s._v(" "),a("p",[s._v("我们需要给每个 Spring Boot 服务（用户服务、题目服务、判题服务、网关服务）都编写一个 Dockerfile，放到每个子服务的根目录下。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928486.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("以用户服务为例，示例代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 基础镜像\nFROM openjdk:8-jdk-alpine\n  \n# 指定工作目录\nWORKDIR /app\n  \n# 将 jar 包添加到工作目录，比如 target/yuoj-backend-user-service-0.0.1-SNAPSHOT.jar\nADD target/yuoj-backend-user-service-0.0.1-SNAPSHOT.jar .\n  \n# 暴露端口\nEXPOSE 8102\n  \n# 启动命令\nENTRYPOINT ["java","-jar","/app/yuoj-backend-user-service-0.0.1-SNAPSHOT.jar","--spring.profiles.active=prod"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("建议先在本地利用 IDEA 开发工具调通镜像构建流程，确保每个 Dockerfile 都是可以成功制作镜像的：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928506.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("查看容器的启动日志，发现能够启动服务、看到 Spring 图标即可：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928160.png",loading:"lazy"}})]),s._v(" "),a("h3",{attrs:{id:"_1-4、编写环境依赖配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4、编写环境依赖配置"}},[s._v("#")]),s._v(" 1.4、编写环境依赖配置")]),s._v(" "),a("p",[s._v("接下来，我们就要编写 Docker Compose 的配置文件了，可以根据配置文件快速启动多个服务。")]),s._v(" "),a("p",[s._v("之前我们已经梳理了服务部署表格，将服务划分为了 “环境依赖” 和 “业务服务”。")]),s._v(" "),a("p",[s._v("由于业务服务依赖 MySQL 等环境依赖，所以需要拆分 2 套 Docker Compose 的配置文件，分别为 "),a("code",[s._v("docker-compose.env.yml")]),s._v(" 环境配置和 "),a("code",[s._v("docker-compose.service.yml")]),s._v(" 业务服务配置，保证先成功启动依赖，再启动服务。")]),s._v(" "),a("p",[s._v("学过 Docker Compose 的同学可能听说过 depends_on 配置，也能决定服务的启动顺序。但是千万注意，depends_on 并不会等待服务完全就绪，只是确保它们在启动时的顺序，并不稳定。")]),s._v(" "),a("p",[s._v("如何编写 Docker Compose 文件呢？")]),s._v(" "),a("p",[s._v("和 Dockerfile 一样，直接去网上找现成的 Docker Compose file，复制粘贴过来略做修改就能使用了~")]),s._v(" "),a("p",[s._v("再配合以下 2 个网站，完全无需记忆 Docker Compose 的写法！")]),s._v(" "),a("ul",[a("li",[s._v("Docker Compose file 官方文档：https://docs.docker.com/compose/compose-file/")]),s._v(" "),a("li",[s._v("搜索现成的 Docker 镜像：https://hub.docker.com/")])]),s._v(" "),a("p",[s._v("当然，现在 AI 时代了，还有更简单的方式！")]),s._v(" "),a("p",[s._v("直接把我们整理好的服务部署需要喂给 GPT，让 AI 帮我们生成配置即可~")]),s._v(" "),a("p",[s._v("示例 prompt：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("现在我需要用 docker compose 来部署 mysql 8（3306 端口）username=root,password=123456\nredis 6（无密码，6379端口）、rabbitmq v.3.12.6（ 5672 端口   password: guest，username: guest）、nacos 2.2.0（8848端口）；还有 4 个本地的 springboot 服务（名称分别为：yuoj-backend-user-service 8102端口、yuoj-backend-question-service 8103端口、yuoj-backend-judge-service 8104端口、yuoj-backend-gateway 8101 端口），每个服务本地目录都有一个 Dockerfile，请帮我自动生成 docker compose 的 yml 配置文件，要求这些服务网络能够连通\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("效果还是非常不错的，只要你描述地足够清楚，生成的配置完全可用！")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928734.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("由于这篇文章是教程嘛，我就带大家通过调试的方式一步步完成 Docker Compose 文件，最后会把完整的 Docker Compose 文件给大家分享出来，大家直接用就行了~")]),s._v(" "),a("p",[s._v("我们要分别在 Docker Compose 中定义 4 大基础依赖，包括 MySQL、Redis、RabbitMQ 和 Nacos。")]),s._v(" "),a("h4",{attrs:{id:"_1-mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-mysql"}},[s._v("#")]),s._v(" 1）MySQL")]),s._v(" "),a("p",[s._v("我们不仅要创建一个 MySQL 服务，还要在创建服务后自动创建我们需要的库表结构。")]),s._v(" "),a("p",[s._v("所以需要先准备数据库 SQL 脚本文件，里面包含了建库、建表语句，我们把它放在微服务项目根目录的 "),a("code",[s._v("mysql-init")]),s._v(" 文件夹中：")]),s._v(" "),a("p",[s._v("鱼皮带大家做的每个项目都提供了现成的建表语句，这是一个非常好的开发习惯，便于其他人快速启动你的项目。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928971.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("由于要在本地启动 MySQL，还需要定义一个文件夹 "),a("code",[s._v(".mysql-data")]),s._v(" 来存放 MySQL 的持久化数据，防止容器重启后数据丢失。")]),s._v(" "),a("p",[s._v("做好这两点后，就可以编写 "),a("code",[s._v("docker-compose.env.yml")]),s._v(" 文件了，先只写一个 MySQL 服务，示例代码如下：")]),s._v(" "),a("p",[s._v("关键配置的含义我都写到注释里了")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("version: '3'\nservices:\n  mysql:\n    image: mysql:8 # 使用的镜像\n    container_name: yuoj-mysql # 启动的实例名称\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456 # root 用户密码\n    ports:\n      - \"3306:3306\" # 端口映射\n    volumes:\n      - ./.mysql-data:/var/lib/mysql # 将数据目录挂载到本地目录以进行持久化\n      - ./mysql-init:/docker-entrypoint-initdb.d # 自动执行启动脚本\n    restart: always # 崩溃后自动重启\n    networks:\n      - mynetwork # 指定网络\nnetworks:\n  mynetwork: # 自定义网络，实现网络互通和隔离\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("写好配置文件后，可以直接在 IDEA 里执行 Docker Compose 文件，调试 MySQL 的运行：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928011.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("运行成功后，我们可以在本地成功连接数据库：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYKWGoz54KwujA7s17P0ZCyew5moibS6Oc1NK9Vw7bPbgrbsZBicEQiaDPrGV5GP3L3dGdictrz0cnZkDA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",loading:"lazy"}})]),s._v(" "),a("h4",{attrs:{id:"_2-redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis"}},[s._v("#")]),s._v(" 2）Redis")]),s._v(" "),a("p",[s._v("Redis 服务的定义和启动操作和 MySQL 服务几乎一致，Redis 的 Docker Compose 配置示例代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("version: '3'\nservices:\n  redis:\n    image: redis:6\n    container_name: yuoj-redis\n    ports:\n      - \"6379:6379\"\n    networks:\n      - mynetwork\n    volumes:\n      - ./.redis-data:/data # 持久化\nnetworks:\n  mynetwork:\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("然后在本地执行 Docker Compose 文件，启动 Redis 服务，并且尝试进入 Terminal 来调试 Redis：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYKWGoz54KwujA7s17P0ZCye45cNbBJT9oV9qqqFFlGQJIu7tVgVZe2YEhibOMC7C7wIDkXNMzZU3yg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",loading:"lazy"}})]),s._v(" "),a("h4",{attrs:{id:"_3-rabbitmq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-rabbitmq"}},[s._v("#")]),s._v(" 3）RabbitMQ")]),s._v(" "),a("p",[s._v("同 MySQL 和 Redis，RabbitMQ 的 Docker Compose 配置示例代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('version: \'3\'\nservices:\n  rabbitmq:\n    image: rabbitmq:3.12.6-management # 支持管理面板的消息队列\n    container_name: yuoj-rabbitmq\n    environment:\n      RABBITMQ_DEFAULT_USER: guest\n      RABBITMQ_DEFAULT_PASS: guest\n    ports:\n      - "5672:5672"\n      - "15672:15672" # RabbitMQ Dashboard 端口\n    volumes:\n      - ./.rabbitmq-data:/var/lib/rabbitmq # 持久化\n    networks:\n      - mynetwork\nnetworks:\n  mynetwork:\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("本地执行 Docker Compose 文件，启动 RabbitMQ 服务，然后可以访问 "),a("code",[s._v("localhost:15672")]),s._v(" 查看到管理面板，就表示启动成功了~")]),s._v(" "),a("p",[s._v("账号密码都是 guest")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYKWGoz54KwujA7s17P0ZCyehG7bfEHLT6UBiaVJZYKicuib92TB0REnpBkQGyCyMe1W80amqQxiaiczlzw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",loading:"lazy"}})]),s._v(" "),a("h4",{attrs:{id:"_4-nacos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-nacos"}},[s._v("#")]),s._v(" 4）Nacos")]),s._v(" "),a("p",[s._v("和其他服务一样，Nacos 也需要编写 Docker Compose 配置。")]),s._v(" "),a("p",[s._v("但是在选择 Nacos 镜像时必须要注意，建议选择支持 linux/arm64 架构的镜像版本，比如 "),a("code",[s._v("v2.2.0-slim")]),s._v("，否则后面可能会无法运行：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928872.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("Nacos 示例配置文件如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("version: '3'\nservices:\n  nacos:\n    image: nacos/nacos-server:v2.2.0-slim\n    container_name: yuoj-nacos\n    ports:\n      - \"8848:8848\"\n    volumes:\n      - ./.nacos-data:/home/nacos/data\n    networks:\n      - mynetwork\n    environment:\n      - MODE=standalone # 单节点模式启动\n      - PREFER_HOST_MODE=hostname # 支持 hostname\n      - TZ=Asia/Shanghai # 控制时区\nnetworks:\n  mynetwork:\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("然后在本地执行 Docker Compose 启动 Nacos，访问 "),a("code",[s._v("localhost:8848/nacos")]),s._v(" 能够看到管理页面，就表示运行成功了~")]),s._v(" "),a("p",[s._v("管理页面的账号和密码默认都是 nacos")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYKWGoz54KwujA7s17P0ZCyeo34e4ic4JAzA1fZ2GPgibIQlkWFe7Q3FrmwstcmLOIMdda0Yb6OzgEcA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",loading:"lazy"}})]),s._v(" "),a("h4",{attrs:{id:"完整-docker-compose-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完整-docker-compose-文件"}},[s._v("#")]),s._v(" 完整 Docker Compose 文件")]),s._v(" "),a("p",[s._v("分别调试完上述服务后，我们把所有的配置拼在一起，就得到了完整的文件，文件名为 "),a("code",[s._v("docker-compose.env.yml")]),s._v("。")]),s._v(" "),a("p",[s._v("完整代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('version: \'3\'\nservices:\n  mysql:\n    image: mysql:8 # 使用的镜像\n    container_name: yuoj-mysql # 启动的实例名称\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456 # root 用户密码\n    ports:\n      - "3306:3306" # 端口映射\n    volumes:\n      - ./.mysql-data:/var/lib/mysql # 将数据目录挂载到本地目录以进行持久化\n      - ./mysql-init:/docker-entrypoint-initdb.d # 启动脚本\n    restart: always # 崩溃后自动重启\n    networks:\n      - mynetwork # 指定网络\n  redis:\n    image: redis:6\n    container_name: yuoj-redis\n    ports:\n      - "6379:6379"\n    networks:\n      - mynetwork\n    volumes:\n      - ./.redis-data:/data # 持久化\n  rabbitmq:\n    image: rabbitmq:3.12.6-management # 支持管理面板的消息队列\n    container_name: yuoj-rabbitmq\n    environment:\n      RABBITMQ_DEFAULT_USER: guest\n      RABBITMQ_DEFAULT_PASS: guest\n    ports:\n      - "5672:5672"\n      - "15672:15672" # RabbitMQ Dashboard 端口\n    volumes:\n      - ./.rabbitmq-data:/var/lib/rabbitmq # 持久化\n    networks:\n      - mynetwork\n  nacos:\n    image: nacos/nacos-server:v2.2.0-slim\n    container_name: yuoj-nacos\n    ports:\n      - "8848:8848"\n    volumes:\n      - ./.nacos-data:/home/nacos/data\n    networks:\n      - mynetwork\n    environment:\n      - MODE=standalone # 单节点模式启动\n      - PREFER_HOST_MODE=hostname # 支持 hostname\n      - TZ=Asia/Shanghai # 控制时区\nnetworks:\n  mynetwork:\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br")])]),a("h3",{attrs:{id:"_1-5、编写业务服务配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5、编写业务服务配置"}},[s._v("#")]),s._v(" 1.5、编写业务服务配置")]),s._v(" "),a("p",[s._v("用同样的方式，我们可以编写业务服务的 Docker Compose 文件，文件名称 "),a("code",[s._v("docker-compose.service.yml")]),s._v("。")]),s._v(" "),a("p",[s._v("示例代码如下，其中需要格外关注的配置是 build 和 depends_on：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('version: \'3\'\nservices:\n  yuoj-backend-gateway:\n    container_name: yuoj-backend-gateway\n    build: # 服务的 Docker 构建文件位置\n      context: ./yuoj-backend-gateway\n      dockerfile: Dockerfile\n    ports:\n      - "8101:8101"\n    networks:\n      - mynetwork\n  \n  yuoj-backend-user-service:\n    container_name: yuoj-backend-user-service\n    build:\n      context: ./yuoj-backend-user-service\n      dockerfile: Dockerfile\n    ports:\n      - "8102:8102"\n    networks:\n      - mynetwork\n    depends_on: # 本服务依赖的服务，控制启动先后顺序\n      - yuoj-backend-gateway\n\n  yuoj-backend-question-service:\n    container_name: yuoj-backend-question-service\n    build:\n      context: ./yuoj-backend-question-service\n      dockerfile: Dockerfile\n    ports:\n      - "8103:8103"\n    networks:\n      - mynetwork\n    depends_on:\n      - yuoj-backend-user-service\n      - yuoj-backend-gateway\n\n  yuoj-backend-judge-service:\n    container_name: yuoj-backend-judge-service\n    build:\n      context: ./yuoj-backend-judge-service\n      dockerfile: Dockerfile\n    ports:\n      - "8104:8104"\n    networks:\n      - mynetwork\n    depends_on:\n      - yuoj-backend-user-service\n      - yuoj-backend-question-service\n      - yuoj-backend-gateway\n\n# 网络，不定义的话就是默认网络\nnetworks:\n  mynetwork:\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br")])]),a("h3",{attrs:{id:"_1-6、调整程序配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6、调整程序配置"}},[s._v("#")]),s._v(" 1.6、调整程序配置")]),s._v(" "),a("p",[s._v("编写好上述配置文件后，本地尝试运行 Docker Compose 业务服务，结果发现：报错啦！依赖服务的地址访问不通！")]),s._v(" "),a("p",[s._v("这是由于之前我们的项目访问依赖服务时，全部是使用了固定的 IP 地址（比如 localhost），而容器内部的 localhost（或 127.0.0.1）通常指向容器本身，而不是宿主主机。所以为了在容器内访问其他服务，程序中应该使用服务名称而不是 localhost。")]),s._v(" "),a("p",[s._v("我们给每个 Spring Boot 服务都增加一套 prod 上线配置，在配置中更改服务调用地址。")]),s._v(" "),a("p",[s._v("用户服务、题目服务和判题服务的 "),a("code",[s._v("application-prod.yml")]),s._v(" 配置修改如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 生产环境配置文件\nspring:\n  # 数据库配置\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://mysql:3306/yuoj # localhost 改为 mysql\n    username: root\n    password: 123456\n  # Redis 配置\n  redis:\n    database: 1\n    host: redis # localhost 改为 redis\n    port: 6379\n    timeout: 5000\n  cloud:\n    nacos:\n      discovery:\n        server-addr: nacos:8848 # localhost 改为 nacos\n  rabbitmq:\n    host: rabbitmq # localhost 改为 rabbitmq\n    port: 5672\n    password: guest\n    username: guest\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("Gateway 网关服务的配置修改如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("spring:\n  cloud:\n    nacos:\n      discovery:\n        server-addr: nacos:8848 # localhost 改为 nacos\n    gateway:\n      routes:\n        - id: yuoj-backend-user-service\n          uri: lb://yuoj-backend-user-service\n          predicates:\n            - Path=/api/user/**\n        - id: yuoj-backend-question-service\n          uri: lb://yuoj-backend-question-service\n          predicates:\n            - Path=/api/question/**\n        - id: yuoj-backend-judge-service\n          uri: lb://yuoj-backend-judge-service\n          predicates:\n            - Path=/api/judge/**\n  application:\n    name: yuoj-backend-gateway\n  main:\n    web-application-type: reactive\nserver:\n  port: 8101\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      enabled: true\n      version: swagger2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("p",[s._v("然后执行 "),a("code",[s._v("mvn package")]),s._v(" 命令重新打包、执行 Docker Compose。")]),s._v(" "),a("p",[s._v("结果发现大多数服务都启动了，但是判题服务还有报错。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYKWGoz54KwujA7s17P0ZCyeL0LEVCoInX5rCJFib6PvGcJrzn9XYUAyFBCI0hACtAo14NU1WtKOMKg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",loading:"lazy"}})]),s._v(" "),a("p",[s._v('这是因为程序在创建消息队列时存在硬编码的变量，指定了 host 为 "localhost"，示例代码如下：')]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('ConnectionFactory factory = new ConnectionFactory();\nfactory.setHost("localhost");\nConnection connection = factory.newConnection();\nChannel channel = connection.createChannel();\nString EXCHANGE_NAME = "code_exchange";\nchannel.exchangeDeclare(EXCHANGE_NAME, "direct");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("举这个例子是为了告诉大家，在程序中尽量不要写固定 IP 或域名，全部改为动态读取配置文件，便于修改。")]),s._v(" "),a("p",[s._v("示例修改后的代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/**\n * 用于创建测试程序用到的交换机和队列（只用在程序启动前执行一次）\n */\n@Slf4j\n@Component\npublic class InitRabbitMqBean {\n\n    @Value("${spring.rabbitmq.host:localhost}")\n    private String host;\n\n    @PostConstruct\n    public void init() {\n        try {\n            ConnectionFactory factory = new ConnectionFactory();\n            factory.setHost(host);\n            Connection connection = factory.newConnection();\n            Channel channel = connection.createChannel();\n            String EXCHANGE_NAME = "code_exchange";\n            channel.exchangeDeclare(EXCHANGE_NAME, "direct");\n\n            // 创建队列，随机分配一个队列名称\n            String queueName = "code_queue";\n            channel.queueDeclare(queueName, true, false, false, null);\n            channel.queueBind(queueName, EXCHANGE_NAME, "my_routingKey");\n            log.info("消息队列启动成功");\n        } catch (Exception e) {\n            log.error("消息队列启动失败");\n        }\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("h3",{attrs:{id:"_1-7、测试访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7、测试访问"}},[s._v("#")]),s._v(" 1.7、测试访问")]),s._v(" "),a("p",[s._v("修复上述问题后，所有服务都可以通过 Docker Compose 文件启动了。")]),s._v(" "),a("p",[s._v("然后我们访问 "),a("code",[s._v("localhost:8101/doc.html")]),s._v(" 网关地址，能够看到 Swagger 聚合接口文档。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928086.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("依次调用用户注册 => 登录 => 获取登录用户信息 => 创建题目接口，全部执行成功。")]),s._v(" "),a("p",[s._v("至此，第一阶段就完成啦。")]),s._v(" "),a("h2",{attrs:{id:"二、服务器部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、服务器部署"}},[s._v("#")]),s._v(" 二、服务器部署")]),s._v(" "),a("p",[s._v("在第二阶段，我们的目标就是在真实的 Linux 服务器上部署微服务项目。有了第一阶段的准备，第二阶段简直可以说是易如反掌！")]),s._v(" "),a("h3",{attrs:{id:"_2-1、准备服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、准备服务器"}},[s._v("#")]),s._v(" 2.1、准备服务器")]),s._v(" "),a("p",[s._v("首先，我们要有一台 Linux 服务器。")]),s._v(" "),a("p",[s._v("选择服务器前，我们必须要评估下微服务项目的内存占用，千万别把服务器的内存买小了！")]),s._v(" "),a("p",[s._v("可以使用 Docker Desktop 直接查看内存占用，虚拟机内存大概占用了 8 个 G、容器实际内存占用了 4 个 G：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928105.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("那我们搞多少内存的服务器呢？")]),s._v(" "),a("p",[s._v("我猜很多同学会说 8 G，奈何我天生反骨，明知山有虎偏向虎山行（主要是想省 💰），我就搞一台 2 核 4 G 的服务器吧（发行版是 CentOS 7.9 Linux），咱们来猜一猜它够不够部署这套有 4 个业务服务的微服务项目呢？")]),s._v(" "),a("p",[s._v("咱们一起来见证下！")]),s._v(" "),a("h3",{attrs:{id:"_2-2、docker-compose-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、docker-compose-安装"}},[s._v("#")]),s._v(" 2.2、Docker Compose 安装")]),s._v(" "),a("p",[s._v("有了服务器后，直接参考 Docker Compose 官方文档来安装。这里我们使用 Docker Compose V2 版本，相比 V1 版本统一了命令，使用更方便：")]),s._v(" "),a("p",[s._v("Docker Compose V2 地址：https://docs.docker.com/compose/migrate/")]),s._v(" "),a("p",[s._v("Docker Compose Linux 安装：https://docs.docker.com/compose/install/linux/#install-using-the-repository")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928154.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("安装过程很简单，跟着官方文档来就行了，主要包括以下几个步骤：")]),s._v(" "),a("p",[s._v("1）设定安装来源：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("2）安装 Docker 和 Docker Compose：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("3）启动 Docker：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sudo systemctl start docker\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("4）测试 Docker：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("systemctl status docker\nsudo docker run hello-world\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_2-3、同步文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、同步文件"}},[s._v("#")]),s._v(" 2.3、同步文件")]),s._v(" "),a("p",[s._v("接下来，我们需要把本地折腾好的微服务项目源码上传到服务器上，可以选择用 FTP 或 SSH 连接文件手动上传文件。")]),s._v(" "),a("p",[s._v("我这里使用 JetBrains 开发工具的远程部署功能，可以配置文件自动上传，步骤如下：")]),s._v(" "),a("p",[s._v("1）进入远程部署配置")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928220.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("2）添加远程部署配置：")]),s._v(" "),a("p",[s._v("这里建议大家不要暴露自己的服务器 IP 啊，当你看到本文的时候，其实我已经把服务器的 IP 更换掉了哈哈哈哈哈哈哈哈！")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928130.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("3）指定连接的服务器配置：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928000.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("4）配置本地文件和服务器文件路径映射：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928314.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("5）开启自动上传：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928688.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("6）首次需要手动上传文件。")]),s._v(" "),a("p",[s._v("上传前记得先删除无用的文件，然后右键项目根目录，点击部署上传代码：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928706.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("上传成功，在服务器对应路径（/code/yuoj-backend-microservice）下能看到已上传的文件列表：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928727.png",loading:"lazy"}})]),s._v(" "),a("h3",{attrs:{id:"_2-4、获取-jar-包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4、获取-jar-包"}},[s._v("#")]),s._v(" 2.4、获取 jar 包")]),s._v(" "),a("p",[s._v("光把代码上传到服务器还是不够的，因为我们构建 Docker 镜像需要 jar 包。")]),s._v(" "),a("p",[s._v("有 2 种方式得到 jar 包：")]),s._v(" "),a("ol",[a("li",[s._v("本地执行 "),a("code",[s._v("mvn package")]),s._v(" 打好 jar 包，然后再上传")]),s._v(" "),a("li",[s._v("服务器上装 Maven，在服务器上打包")])]),s._v(" "),a("p",[s._v("但是因为 jar 包比较大，频繁改动的话同步速度会比较慢，所以更建议第二种方式，步骤如下：")]),s._v(" "),a("p",[s._v("1）安装 Maven：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sudo yum install maven\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("2）安装好后，执行打包：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sudo mvn package\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("打包成功：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928733.png",loading:"lazy"}})]),s._v(" "),a("h3",{attrs:{id:"_2-5、服务启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5、服务启动"}},[s._v("#")]),s._v(" 2.5、服务启动")]),s._v(" "),a("p",[s._v("所有一切准备就绪，接下来就是使用 Docker Compose 命令分别启动环境依赖和业务服务啦。")]),s._v(" "),a("h4",{attrs:{id:"_1-启动环境依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-启动环境依赖"}},[s._v("#")]),s._v(" 1）启动环境依赖")]),s._v(" "),a("p",[s._v("先使用 docker compose 一行命令启动环境依赖：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker compose -f docker-compose.env.yml up\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("注意：")]),s._v(" "),a("ol",[a("li",[s._v('老版本使用 "docker-compose" 替代 "docker compose"')]),s._v(" "),a("li",[s._v('如果没有权限，命令前加上 "sudo"')])]),s._v(" "),a("p",[s._v("然后喝杯咖啡，等待启动即可~")]),s._v(" "),a("p",[s._v("启动成功后，我们可以通过公网 IP 来尝试访问服务。")]),s._v(" "),a("p",[s._v("先进入到云服务商的服务器配置页，修改服务器的防火墙配置，放通以下端口：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928933.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("然后像访问本地服务一样分别去访问 MySQL、Redis、RabbitMQ、Nacos 即可，应该都是成功的。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928247.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("由于进程在前台启动会影响我们的操作，所以先按 "),a("code",[s._v("ctrl + c")]),s._v(" 退出，加上 "),a("code",[s._v("-d")]),s._v(" 参数让容器在后台启动：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sudo docker compose -f docker-compose.env.yml up -d\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("试着查看下 docker 容器的状态：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sudo docker stats\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("能够查看到所有容器的资源占用情况：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928655.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("实话说，我开始紧张了，不知道 4 G 的内存够不够撑。。。")]),s._v(" "),a("h4",{attrs:{id:"_2-启动业务服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-启动业务服务"}},[s._v("#")]),s._v(" 2）启动业务服务")]),s._v(" "),a("p",[s._v("确保环境依赖都启动成功后，接下来启动业务服务：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("docker compose -f docker-compose.service.yml up\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("项目全部启动，看得很爽：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928915.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("正常来说，应该会启动成功；但如果运气背，可能会有失败，比如我这的网关服务就启动失败了。")]),s._v(" "),a("p",[s._v("如果某个服务启动失败，可以再次单独只启动它，比如网关服务：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sudo docker compose -f docker-compose.service.yml up yuoj-backend-gateway\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2-6、测试访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6、测试访问"}},[s._v("#")]),s._v(" 2.6、测试访问")]),s._v(" "),a("p",[s._v("最后，像验证本地微服务项目部署一样，访问线上网关的接口文档（ http://你的服务器 IP:8101/doc.html ），依次调用用户注册 => 登录 => 获取登录用户信息 => 创建题目，全部成功~")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928930.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("最后使用 "),a("code",[s._v("docker stats")]),s._v(" 命令查看 Docker 容器的状态，发现总共的内存占用大概 3 G，也就是说 4 G 内存的服务器是完全足够小型微服务项目的部署了~")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928035.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("至此，微服务项目部署教程就结束了。")]),s._v(" "),a("h2",{attrs:{id:"最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[s._v("#")]),s._v(" 最后")]),s._v(" "),a("p",[s._v("最后我再问个问题，如果我只有一台 2 G 内存的服务器，能否成功部署这套有 4 个业务服务的项目呢？如果能的话，又应该怎么部署呢？欢迎大家讨论。")]),s._v(" "),a("p",[s._v("下图是个小提示：")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311071928269.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("终于写完了这篇 6000 多字的教程，如果觉得本期内容有帮助的话，也欢迎点赞、收藏三连支持，谢谢大家！")])])}),[],!1,null,null,null);a.default=e.exports}}]);