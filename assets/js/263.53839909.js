(window.webpackJsonp=window.webpackJsonp||[]).push([[263],{567:function(a,s,n){"use strict";n.r(s);var e=n(4),t=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java-处理表格-真的很爽"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-处理表格-真的很爽"}},[a._v("#")]),a._v(" Java 处理表格，真的很爽！")]),a._v(" "),s("blockquote",[s("p",[a._v("本文作者："),s("a",{attrs:{href:"https://yuyuanweb.feishu.cn/wiki/Abldw5WkjidySxkKxU2cQdAtnah",target:"_blank",rel:"noopener noreferrer"}},[a._v("程序员鱼皮"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("本站地址："),s("a",{attrs:{href:"https://codefather.cn",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://codefather.cn"),s("OutboundLink")],1)])]),a._v(" "),s("blockquote",[s("p",[a._v("一个简单又快速的表格处理库")])]),a._v(" "),s("p",[a._v("大家好，我是鱼皮。")]),a._v(" "),s("p",[a._v("处理 Excel 表格是开发中经常遇到的需求，比如表格合并、筛选表格中的某些行列、修改单元格数据等。")]),a._v(" "),s("p",[a._v("今天给大家分享一个 Java 处理表格的工具库，不需要任何专业知识，拿来就能用，快速又轻松~")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311081004788.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("可能有同学说了，用 Python 处理表格不是更方便么？为毛用 Java 啊？")]),a._v(" "),s("p",[a._v("当然是因为企业中大部分后台开发用的都是 Java！如果你要搞一个允许用户自主上传 Excel 进行处理的服务，那显然直接用 Java 来实现最方便~")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311081004380.png",loading:"lazy"}})]),a._v(" "),s("h2",{attrs:{id:"easy-excel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#easy-excel"}},[a._v("#")]),a._v(" Easy Excel")]),a._v(" "),s("p",[a._v("要介绍的库是阿里的 Easy Excel，简单、省内存的读写 Excel 的开源项目。")]),a._v(" "),s("blockquote",[s("p",[a._v("文档地址：https://www.yuque.com/easyexcel/doc/easyexcel")])]),a._v(" "),s("p",[a._v("直接打开官方文档，就能看到项目的使用说明了：")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311081004541.png",loading:"lazy"}}),a._v("官方文档")]),a._v(" "),s("p",[a._v("首先在项目中引入 Easy Excel（版本号以文档中的最新版本号为主）：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>easyexcel</artifactId>\n    <version>3.0.5</version>\n</dependency>\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])]),s("p",[a._v("然后进入文档的 "),s("strong",[a._v("快速开始")]),a._v(" 部分，就可以看到读取和写入表格数据的方法了。")]),a._v(" "),s("p",[a._v("下面让我们以一个实际需求为例，试着使用一下这个库。")]),a._v(" "),s("h3",{attrs:{id:"需求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#需求"}},[a._v("#")]),a._v(" 需求")]),a._v(" "),s("p",[a._v("假设我们有这样一个 Excel 表格：")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311081004792.png",loading:"lazy"}})]),a._v(" "),s("p",[a._v("如果想要调换 "),s("strong",[a._v("姓名列")]),a._v(" 和 "),s("strong",[a._v("年龄列")]),a._v(" 的顺序，应该怎么做呢？")]),a._v(" "),s("h3",{attrs:{id:"读取表格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取表格"}},[a._v("#")]),a._v(" 读取表格")]),a._v(" "),s("p",[a._v("首先要读取原始表格中的数据。")]),a._v(" "),s("p",[a._v("Easy Excel 提供了两种读取表格的方式："),s("strong",[a._v("创建对象的读")]),a._v(" 和 "),s("strong",[a._v("不创建对象的读")]),a._v(" 。")]),a._v(" "),s("h4",{attrs:{id:"创建对象的读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的读"}},[a._v("#")]),a._v(" 创建对象的读")]),a._v(" "),s("p",[a._v("如果你已知整个表格的表头信息，比如列名（比如 “姓名”）和列的数据类型（比如字符串），那么可以创建一个对应的类，用来在 Java 中表示表格的元信息。")]),a._v(" "),s("p",[a._v("比如为上述表格创建 "),s("code",[a._v("YupiData")]),a._v(" 类，代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@Data\npublic class YupiData {\n  // 姓名\n  private String name;\n  // 年龄\n  private Integer age;\n  // 出生日期\n  private Date bornDate;\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("默认会根据属性的顺序来关联表格列的顺序，比如 name 对应姓名（第 0 列）、age 对应年龄（第 1 列）。")]),a._v(" "),s("p",[a._v("当然，你也可以使用注解的方式来指定每个属性对应的表格列，支持指定下标和列名，代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('@Data\npublic class YupiData {\n  // 强制读取下标为 2 的列（第三列）\n  @ExcelProperty(index = 2)\n  // 指定接受日期的格式\n  @DateTimeFormat("yyyy/MM/dd")\n  private Date bornDate;\n    \n  // 用名字去匹配，不能和其他列重复\n  @ExcelProperty("年龄")\n  private Integer age;\n    \n  @ExcelProperty("姓名")\n  private String name;\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br")])]),s("p",[a._v("定义好了表格数据类，就可以开始读取了，该库非常贴心，提供了 "),s("strong",[a._v("同步")]),a._v(" 和 "),s("strong",[a._v("异步")]),a._v(" 两种读取方式。")]),a._v(" "),s("p",[a._v("同步是指一次性读取表格中的所有行，以列表的方式完整返回，再整体去处理。由于这种方式会将数据完整加载到内存中，因此只 "),s("strong",[a._v("适用于表格行数比较少")]),a._v(" 的情况。代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('    /**\n     * 同步读取\n     */\n    public void synchronousRead() {\n      String fileName = "鱼皮的表格.xlsx";\n      // 读取到的数据\n      List<YupiData> list = EasyExcel.read(fileName)\n       .head(YupiData.class)\n        .sheet()\n        .doReadSync();\n    }\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("p",[a._v("异步方式需要定义一个 "),s("strong",[a._v("监听器")]),a._v(" ，每读取一行，就要立即去处理该行数据。这样就不需要将所有数据都加载到内存中，算一行读一行，理论上算完了也可以丢弃。代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('/**\n * 定义监听器\n */ \npublic class YupiDataListener \n    implements ReadListener<YupiData> {\n  /**\n   * 每读一行数据，都会调用一次\n   *\n   * @param data 一行数据\n   * @param context 上下文\n   */\n  @Override\n  public void invoke(YupiData data, AnalysisContext context) {\n    // 输出姓名\n    System.out.println(data.getName());\n  }\n}\n\n/**\n * 开始读取\n */\nvoid assynchronousRead() {\n  String fileName = "鱼皮的表格.xlsx";\n  EasyExcel.read(fileName, YupiData.class,\n      new YupiDataListener())\n      .sheet()\n      .doRead();\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br")])]),s("h4",{attrs:{id:"不创建对象的读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不创建对象的读"}},[a._v("#")]),a._v(" 不创建对象的读")]),a._v(" "),s("p",[a._v("如果事先不清楚表格会有哪些列、类型如何（比如让用户自主上传表格），那么可以使用 "),s("strong",[a._v("不创建对象读")]),a._v(" 的方式，直接用 "),s("code",[a._v("Map<Integer, String>")]),a._v(" 泛型类来接收：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("List<Map<Integer, String>> list = EasyExcel\n    .read(fileName)\n    .sheet()\n    .doReadSync();\n// Map 的 key 为列下标，value 为单元格的值\nfor (Map<Integer, String> data : list) {\n ... \n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("当然，这种读取方式也同时支持同步和异步，可以根据需求选择方式，灵活的一批！")]),a._v(" "),s("h3",{attrs:{id:"写入表格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写入表格"}},[a._v("#")]),a._v(" 写入表格")]),a._v(" "),s("p",[a._v("学会读取后，写入表格就更简单了，依然是先定义一个类，用来表示要写入表格的元信息（列名、列数据类型等）。")]),a._v(" "),s("p",[a._v("比如要完成表格列顺序调换的需求，定义表格数据类的时候，把 age 和 name 属性的顺序换一下就好了：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("@Data\npublic class YupiWriteData {\n  // 年龄 ↑\n  private Integer age;\n  // 姓名 ↓\n  private String name;\n  // 出生日期\n  private Date bornDate;\n}\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br")])]),s("p",[a._v("然后执行 Easy Excel 的 write 方法，就完事了，代码如下：")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('void doWrite() {\n  // 已读取和处理后的数据列表\n  List<YupiWriteData> dataList = xxx;\n  String fileName = "result.xlsx";\n  EasyExcel.write(fileName, YupiWriteData.class)\n      .sheet("工作表1")\n      .doWrite(dataList);\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br")])]),s("p",[a._v("搞定，是不是贼简单！")]),a._v(" "),s("p",[a._v("除了这个库外，Java 处理 Excel 的库还有很多，比如 Apache POI、Hutool 等，大家可以去试试。但我个人感觉还是 Easy Excel 更对我的胃口。")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("好了，是不是很简单了，有兴趣的话自己写个表格处理程序吧~")]),a._v(" "),s("p",[a._v("学到的话，帮鱼皮点个 "),s("strong",[a._v("赞 + 在看")]),a._v(" 呗，感谢！")]),a._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202311081004090.png",loading:"lazy"}})])])}),[],!1,null,null,null);s.default=t.exports}}]);