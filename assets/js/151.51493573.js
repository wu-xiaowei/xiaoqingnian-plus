(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{453:function(a,t,s){"use strict";s.r(t);var n=s(4),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"如何高效测试接口-自动生成接口文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何高效测试接口-自动生成接口文档"}},[a._v("#")]),a._v(" 如何高效测试接口？自动生成接口文档")]),a._v(" "),t("blockquote",[t("p",[a._v("本文作者："),t("a",{attrs:{href:"https://yuyuanweb.feishu.cn/wiki/Abldw5WkjidySxkKxU2cQdAtnah",target:"_blank",rel:"noopener noreferrer"}},[a._v("程序员鱼皮"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("本站地址："),t("a",{attrs:{href:"https://codefather.cn",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://codefather.cn"),t("OutboundLink")],1)])]),a._v(" "),t("p",[a._v("作为一名后端程序员，一定要对自己写的接口负责，保证接口的正确和稳定性。因此，接口测试也是后端开发中的关键环节。")]),a._v(" "),t("p",[a._v("但我相信，很多朋友是懒得测试接口的，觉得这很麻烦。一般自己写的接口自己都不调用，而是直接甩给前端或者其他调用方去验证，出了问题再改。虽然自己爽了，但在别人眼里，可能已经对你 “怀恨在心”，不是不报，时候未到而已。")]),a._v(" "),t("p",[a._v("其实测试接口并不难，这篇文章就给大家分享一些常用的接口测试工具，其中有些工具不仅能帮助你高效测试接口，甚至还能自动生成接口代码和接口文档！")]),a._v(" "),t("h2",{attrs:{id:"常用接口测试工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用接口测试工具"}},[a._v("#")]),a._v(" 常用接口测试工具")]),a._v(" "),t("p",[a._v("这里给大家推荐 4 种常用的接口测试工具，至于到底用哪个，全凭大家的喜好，自己用着舒服就好。")]),a._v(" "),t("h3",{attrs:{id:"_1、curl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、curl"}},[a._v("#")]),a._v(" 1、cURL")]),a._v(" "),t("p",[a._v("cURL 是一个功能强大的命令行工具，它可以用命令的形式来发送各种类型的 HTTP 请求。虽然它没有图形界面，但是却非常灵活，深受开发者们的喜爱。")]),a._v(" "),t("blockquote",[t("p",[a._v("指路：https://curl.se/")])]),a._v(" "),t("p",[a._v("cURL 的用法也很简单，比如测试 GET 请求类型的接口，只需输入下列命令：")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("要测试的接口地址"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("测试 POST 类型的接口，命令如下：")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-d")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('\'{"name":"yupi"}\'')]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-H")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Content-Type: application/json"')]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("要测试的接口地址"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("其中使用 "),t("code",[a._v("-d")]),a._v(" 选项表示要发送的数据，"),t("code",[a._v("-H")]),a._v(" 选项设置请求头，指定发送 JSON 数据。")]),a._v(" "),t("p",[a._v("以上只是 cURL 的基础用法，它还支持很多高级的参数，不过没必要去记忆。一般我们在调用别人接口时，可以先在 F12 开发者工具中找到某个请求，然后点击 "),t("code",[a._v("以 cURL 格式复制")]),a._v(" 就能得到可直接使用的 curl 命令了。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697727100098-011d8a12-2fe5-4421-8f8d-825c21d63f56.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("强烈建议大家学会使用 cURL，尤其是 Linux 开发者们，在没有图形界面的场景下这个工具可太实用了。")]),a._v(" "),t("h3",{attrs:{id:"_2、apifox"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、apifox"}},[a._v("#")]),a._v(" 2、Apifox")]),a._v(" "),t("p",[a._v("要是几年前，我可能还会建议大家去用 Postman 这种图形界面测试软件，但现在时代变了，越来越多国产的接口测试工具能力已经远超了 Postman。")]),a._v(" "),t("p",[a._v("比如我在用的 Apifox，它是一个非常强大的 "),t("code",[a._v("API 设计 + 开发 + 测试一体")]),a._v(" 的协作工具。")]),a._v(" "),t("blockquote",[t("p",[a._v("指路：http://apifox.com/b2liyupi")])]),a._v(" "),t("p",[a._v("首先是支持 20 多种格式的接口数据导入，快速可视化接口信息：")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697727719582-3b58a60f-70a8-42b1-ba48-14adbeedd4c9.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("然后可以一键调试接口，哪怕你本地的后端服务器没有启动，也可以通过 Mock 功能快速生成模拟数据！")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697727817429-5ebc1665-2179-45f3-aa55-bd863d78d01a.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("Apifox 还有个很强大的能力，支持基于接口信息去生成 130 多种语言及框架的代码！也就是说，你可以先和前端约定并编写好接口文档，然后直接生成代码就能给前端调试了。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697727951940-af4b1020-2acb-4730-b714-12cb863c3254.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("更多的功能就先不介绍了，感兴趣的同学自己探索。")]),a._v(" "),t("h3",{attrs:{id:"_3、idea-的-http-client"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、idea-的-http-client"}},[a._v("#")]),a._v(" 3、IDEA 的 HTTP Client")]),a._v(" "),t("p",[a._v("IntelliJ IDEA 开发工具内置了一个 HTTP Client 工具，它允许开发者在 IDE 中直接创建、管理和发送 HTTP 请求，并查看响应结果。")]),a._v(" "),t("p",[a._v("用法很简单，首先进入 IDE 的 Tools => HTTP Client，点击创建一个请求：")]),a._v(" "),t("p",[a._v("支持将 cURL 转换为 HTTP 请求，可见 cURL 的地位")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697728344182-79ba6724-5b50-4978-b037-b35f2fac0c75.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("然后进入请求编辑界面，刚开始不熟悉请求编写语法的话，可以点击右上角导入示例的请求信息：")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697728547281-1407dd65-67d8-4a57-a4ac-3c5979338560.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("比如导入一个 GET 请求示例：")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697728604443-a711636d-553c-4c68-9e1c-1f7992e73e3a.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("然后点击绿色的箭头就能发送接口测试请求了，能够看到详细的响应信息：")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697728679041-2f5203ea-da78-4088-96d7-5ee408e79877.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("不过我个人不喜欢这种方式来测试接口，写代码已经很累了，结果测试接口还让我写代码？？？")]),a._v(" "),t("h3",{attrs:{id:"_4、swagger-和-knife4j"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、swagger-和-knife4j"}},[a._v("#")]),a._v(" 4、Swagger 和 Knife4j")]),a._v(" "),t("h4",{attrs:{id:"swagger"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swagger"}},[a._v("#")]),a._v(" Swagger")]),a._v(" "),t("p",[a._v("Swagger 是一个知名的 API 开源项目。此前，很多同学对 Swagger 的认识可能仅停留在生成接口文档，即下图的 "),t("code",[a._v("Swagger UI")]),a._v("，可以在线查看和调试接口信息。")]),a._v(" "),t("blockquote",[t("p",[a._v("指路：https://swagger.io/tools/swagger-ui/")])]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697728940485-0597573e-97c2-4867-a79e-9cdb0aab2f04.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("但实际上，Swagger UI 只是 Swagger 的其中一个功能，Swagger 还包含了 Swagger Editor 接口编辑器、Swagger Codegen 代码生成器等强大工具。")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697729062255-9dbd38c5-dfc1-4de8-a42d-8b824c59f9da.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("严格来说，Swagger 是 "),t("strong",[a._v("一套")]),a._v(" 完整的 API 开发工具，让我们在统一的界面中完成 API 设计、接口开发、接口测试、文档生成等功能，极大地提高了开发效率。")]),a._v(" "),t("p",[a._v("一般来说，只需要在项目中引入 Swagger 依赖，并且通过注解的方式来描述 API 的信息，就可以使用它进行接口测试和文档生成了。")]),a._v(" "),t("p",[a._v("但其实，我个人已经很久没有直接使用 Swagger 了，而是会选用它的增强版 "),t("code",[a._v("Knife4j")]),a._v(" 来生成接口文档。要说原因的话，就是 Swagger 的默认界面有点小丑，API 多了管理起来就会很麻烦。")]),a._v(" "),t("p",[a._v("感受一下：")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697729785541-29de1f7b-e428-4ba8-8104-8fe75af138d3.png",loading:"lazy"}})]),a._v(" "),t("h4",{attrs:{id:"knife4j"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#knife4j"}},[a._v("#")]),a._v(" Knife4j")]),a._v(" "),t("p",[a._v("Knife4j 是一个基于 Swagger 的增强工具，它提供了更美观的界面和更多功能，让接口测试和文档生成更加高效。")]),a._v(" "),t("blockquote",[t("p",[a._v("指路：https://doc.xiaominfo.com/")])]),a._v(" "),t("p",[a._v("Knife4j 的用法很简单，按照官方文档的指引，首先根据自己项目的 Spring Boot 版本引入对应的依赖，比如 Spring Boot 2.x 推荐使用以下 Maven 配置：")]),a._v(" "),t("div",{staticClass:"language-xml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-xml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("com.github.xiaoymin"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("groupId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("knife4j-openapi2-spring-boot-starter"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("artifactId")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("4.3.0"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("version")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("dependency")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("然后在 Spring Boot 的配置文件 "),t("code",[a._v("application.yml")]),a._v(" 中添加 Knife4j 相关配置，比如：")]),a._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("knife4j")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("enable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("openapi")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("title")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" Knife4j 文档\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("最后，访问 Knife4j 的文档地址（一般是项目地址 + "),t("code",[a._v("/doc.html")]),a._v("），即可查看自动根据 Controller 接口代码而生成的接口文档。")]),a._v(" "),t("p",[a._v("示例文档如下：")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697730186817-40f8d1db-ea19-45f9-ae0e-b7f032c0189e.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("选中某个接口，就可以在线调试了：")]),a._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/1/1697730368657-397cec17-d11a-4d40-a620-ab6d4b9b3918.png",loading:"lazy"}})]),a._v(" "),t("p",[a._v("当然，因为 Knife4j 的底层也是依赖 Swagger 的，所以你还可以使用 Swagger 注解来自定义接口的信息。")]),a._v(" "),t("p",[a._v("比如下列代码，就使用了 Swagger 的 @Api 和 @ApiOperation 注解给接口添加名称和描述信息：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@RestController")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@RequestMapping")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/api/posts"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Api")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("tags "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"帖子管理"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PostController")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@PostMapping")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@ApiOperation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"创建帖子"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" notes "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"用于创建新的帖子"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ResponseEntity")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("createPost")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@RequestBody")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("PostRequest")]),a._v(" postRequest"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在这里实现创建帖子的逻辑")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ResponseEntity")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ok")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"帖子创建成功"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br")])]),t("p",[a._v("这样能让生成的接口文档更通俗易懂，而不是大把的英文。")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("总结一下，我个人最推荐的接口调试方式是 cURL、Apifox 和 Knife4j 的组合：")]),a._v(" "),t("ul",[t("li",[a._v("无界面（Linux）环境用 cURL")]),a._v(" "),t("li",[a._v("桌面端管理接口、Mock 数据用 Apifox")]),a._v(" "),t("li",[a._v("项目中引入 Knife4j，实现快速的接口文档生成和 web 共享")])]),a._v(" "),t("h2",{attrs:{id:"实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[a._v("#")]),a._v(" 实践")]),a._v(" "),t("p",[a._v("编程导航星球的所有后端项目都使用了 Swagger + Knife4j 实现接口调试和接口文档生成。")]),a._v(" "),t("p",[a._v("👉🏻 编程导航原创项目教程系列：https://yuyuanweb.feishu.cn/wiki/SePYwTc9tipQiCktw7Uc7kujnCd")])])}),[],!1,null,null,null);t.default=e.exports}}]);