(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{393:function(s,t,a){"use strict";a.r(t);var n=a(4),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"mysql-的-char-并不一定是定长"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mysql-的-char-并不一定是定长"}},[s._v("#")]),s._v(" MySQL 的 Char 并不一定是定长")]),s._v(" "),t("blockquote",[t("p",[s._v("作者：山山水水，"),t("a",{attrs:{href:"https://wx.zsxq.com/dweb2/index/group/51122858222824",target:"_blank",rel:"noopener noreferrer"}},[s._v("编程导航星球"),t("OutboundLink")],1),s._v(" 编号 17561")])]),s._v(" "),t("p",[s._v("MySQL的CHAR和VARCHAR有什么区别？可以把 CHAR 全部用 VARCHAR 替换吗？")]),s._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),t("p",[s._v("一个太常见的面试题是："),t("strong",[s._v("MySQL的CHAR和VARCHAR有什么区别")]),s._v("？")]),s._v(" "),t("p",[s._v("如果你的答案只是：定/变长，性能不同，再加个尾部空格处理不同")]),s._v(" "),t("p",[s._v("那么，"),t("strong",[s._v("这篇文章一定会带给你一些收获")]),s._v("。")]),s._v(" "),t("p",[s._v("看似简单的面试题，也许也会牵扯到许多底层知识，没有什么是理所当然的。")]),s._v(" "),t("h4",{attrs:{id:"正文开始"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正文开始"}},[s._v("#")]),s._v(" 正文开始")]),s._v(" "),t("p",[s._v("最近在MySQL官网上看到这样一句话：")]),s._v(" "),t("blockquote",[t("p",[s._v("Internally, for nonvariable-length character sets, fixed-length character columns such as CHAR(10) are stored in a fixed-length format.")])]),s._v(" "),t("p",[s._v("对于「非变长字符集」，CHAR(10) 以定长格式存储，强调了「非变长字符集」")]),s._v(" "),t("p",[s._v("那么，第一个疑问是，"),t("strong",[s._v("对于「变长字符集」，CHAR(10) 还是定长存储吗？")])]),s._v(" "),t("p",[s._v("作为佐证，《MySQL实战宝典》中说到：鉴于目前默认字符集推荐设置为 UTF8MB4，所以在表结构设计时，可以把 CHAR 全部用 VARCHAR 替换，底层存储的本质实现一模一样。")]),s._v(" "),t("p",[s._v("所以，第二个疑问是，"),t("strong",[s._v("CHAR比起VARCHAR真的一无是处吗？")])]),s._v(" "),t("p",[s._v("带着这两个疑问，我们就开始今天的探索了。")]),s._v(" "),t("blockquote",[t("p",[s._v("以下基于MySQL 8.0版本")])]),s._v(" "),t("h2",{attrs:{id:"char定长-定-的到底是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#char定长-定-的到底是什么"}},[s._v("#")]),s._v(' CHAR定长，"定"的到底是什么')]),s._v(" "),t("p",[s._v("对于CHAR(N)，N 的范围是 0 ~ 255，"),t("strong",[s._v("指的是字符的个数，而非字节")]),s._v("。这一点非常重要。")]),s._v(" "),t("blockquote",[t("p",[s._v("CHAR，VARCHAR，TEXT都是字节；而BINARY，VARBINARY，BLOB都是字符。")])]),s._v(" "),t("p",[s._v("而对于「变长字符集」，一个字符对应的字节数是不确定的，而底层存储自然不会关心字符个数，对于VARCHAR而言，行格式的头部元数据也只会存储VARCHAR的字节长度，而非字符长度。")]),s._v(" "),t("h2",{attrs:{id:"我用的是变长字符集吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我用的是变长字符集吗"}},[s._v("#")]),s._v(" 我用的是变长字符集吗")]),s._v(" "),t("p",[s._v("MySQL使用"),t("code",[s._v("character set")]),s._v("或"),t("code",[s._v("charset")]),s._v("来表达字符集。")]),s._v(" "),t("p",[s._v("你可以采用如下命令查看MySQL提供的字符集， 其中"),t("code",[s._v("Default collation")]),s._v("代表默认的排序比较规则，"),t("code",[s._v("Maxlen")]),s._v("是一个字符对应的最大字节数。")]),s._v(" "),t("div",{staticClass:"language-asciidoc line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-asciidoc"}},[t("code",[s._v("mysql> SHOW CHARSET LIKE "),t("span",{pre:!0,attrs:{class:"token inline"}},[t("span",{pre:!0,attrs:{class:"token italic"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'")]),s._v("utf8%"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'")])])]),s._v(";\n--     SHOW CHARACTER SET LIKE "),t("span",{pre:!0,attrs:{class:"token inline"}},[t("span",{pre:!0,attrs:{class:"token italic"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'")]),s._v("utf8%"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("'")])])]),s._v("; \n"),t("span",{pre:!0,attrs:{class:"token inline"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")]),s._v("---------"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")])]),s._v("---------------"),t("span",{pre:!0,attrs:{class:"token inline"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")]),s._v("--------------------"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")])]),s._v("--------+\n| Charset | Description   | Default collation  | Maxlen |\n"),t("span",{pre:!0,attrs:{class:"token inline"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")]),s._v("---------"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")])]),s._v("---------------"),t("span",{pre:!0,attrs:{class:"token inline"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")]),s._v("--------------------"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")])]),s._v("--------+\n| utf8    | UTF-8 Unicode | utf8_general_ci    |      3 |\n| utf8mb4 | UTF-8 Unicode | utf8mb4_0900_ai_ci |      4 |\n"),t("span",{pre:!0,attrs:{class:"token inline"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")]),s._v("---------"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")])]),s._v("---------------"),t("span",{pre:!0,attrs:{class:"token inline"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")]),s._v("--------------------"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("+")])]),s._v("--------+\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("MySQL默认的字符集是 "),t("code",[s._v("utf8mb4")]),s._v(" ，排序规则为 "),t("code",[s._v("utf8mb4_0900_ai_ci")]),s._v("，除非你在创建数据库，表，字段时显式指定，否则都采用这个默认值，而"),t("code",[s._v("utf8mb4")]),s._v("就是一个变长字符集。")]),s._v(" "),t("p",[s._v("你还可以通过"),t("code",[s._v("SHOW CREATE TABLE")]),s._v("命令查看具体某一列的字符集。")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SHOW")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("表名称"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("为了能够存储某些emoji表情，许多字段都会采取 "),t("code",[s._v("utf8mb4")]),s._v("作为字符集，因此大部分情况，字符串字段都会采用变长字符集。")]),s._v(" "),t("h2",{attrs:{id:"当「定长字符」遇上「变长字节」"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当「定长字符」遇上「变长字节」"}},[s._v("#")]),s._v(" 当「定长字符」遇上「变长字节」")]),s._v(" "),t("p",[s._v("那现在问题就来了，CHAR是定字符数，但字符集导致了字符对应的字节数是不定的。因此：")]),s._v(" "),t("p",[s._v("在「变长字符集」下，CHAR并非定字节存储，而底层存储只认字节不认字符，这该怎么办呢？")]),s._v(" "),t("p",[s._v("这就取决于「存储引擎」和「行格式」的具体实现了。")]),s._v(" "),t("blockquote",[t("p",[s._v("下面都基于InnoDB存储引擎")])]),s._v(" "),t("h3",{attrs:{id:"redundant行格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redundant行格式"}},[s._v("#")]),s._v(" Redundant行格式")]),s._v(" "),t("p",[s._v("一种很好想到的简单的做法是：化变为不变。即我们还是希望CHAR是定字节存储，但又要符合用户最大字符数的预期，那我们就让CHAR(N)的字节数为「字符集的一个字符对应的最大字节数*N」。")]),s._v(" "),t("h4",{attrs:{id:"没用上的字节如何填充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#没用上的字节如何填充"}},[s._v("#")]),s._v(" 没用上的字节如何填充")]),s._v(" "),t("p",[s._v("答案是用空格填充，直至CHAR(N)的实际字节数达到「字符集的一个字符对应的最大字节数*N」。")]),s._v(" "),t("ul",[t("li",[s._v("存储 CHAR 值时，会用空格将其填充到指定的长度。")]),s._v(" "),t("li",[s._v("查询 CHAR 值时，除非启用 "),t("code",[s._v("PAD_CHAR_TO_FULL_LENGTH SQL")]),s._v(" 模式，否则会"),t("strong",[s._v("删除尾部空格")]),s._v("。")])]),s._v(" "),t("blockquote",[t("p",[s._v("这与VARCHAR不同，VARCHAR在存储和查询时，会保留尾部空格，除非超过列的最大长度。")]),s._v(" "),t("p",[s._v("下面用官网的例子来理解一下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- SQL:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" vc "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VARCHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHAR")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" vc "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("VALUES")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ab  '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ab  '")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- RESULT:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" CONCAT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" CONCAT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" vc"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---------------------+---------------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" CONCAT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" CONCAT"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'('")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("')'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---------------------+---------------------+")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ab  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ab"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("---------------------+---------------------+")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"compact家族行格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compact家族行格式"}},[s._v("#")]),s._v(" Compact家族行格式")]),s._v(" "),t("blockquote",[t("p",[s._v("Dynamic 和 Compressed都是Compact衍生而来，Dynamic是MySQL8.0 InnoDB的默认行格式。因此，此处介绍的特性对如今广泛使用的 Dynamic 同样适用。")])]),s._v(" "),t("p",[s._v("在InnoDB的Compact行格式家族中，对变长字符集的CHAR有特殊优化：")]),s._v(" "),t("ul",[t("li",[s._v("如果CHAR(N)的实际字节数小于等于N，不会在尾部追加空格直到达到「字符集的一个字符对应的最大字节数*N」（以utf8mb4为例，就是4 * N），而是追加到N，就停止。")]),s._v(" "),t("li",[s._v("如果CHAR(N)的实际字节数大于N，不会在尾部追加空格")])]),s._v(" "),t("h4",{attrs:{id:"为什么仍然至少为n"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么仍然至少为n"}},[s._v("#")]),s._v(" 为什么仍然至少为N")]),s._v(" "),t("p",[s._v("即便在Compact紧凑行格式下，CHAR都至少占N个字节，既然都已经是变长了，为啥还至少要N个字节呢？官方给出的解释是这样的：")]),s._v(" "),t("blockquote",[t("p",[s._v("Reserving the minimum space N in many cases enables column updates to be done in place without causing index page fragmentation.")])]),s._v(" "),t("p",[s._v("即在大部分情况下，预留N个字节能够避免「索引页分裂」问题。但继续说这个就跑题了，感兴趣的可以去查一下")]),s._v(" "),t("h2",{attrs:{id:"测试-验证结论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试-验证结论"}},[s._v("#")]),s._v(" 测试：验证结论")]),s._v(" "),t("p",[s._v("以上都是理论，为了证明我不是在胡说八道，接下来搞点实战：")]),s._v(" "),t("p",[s._v("先来建个表，注意这里用了NOT NULL：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("char_test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token identifier"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("`")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("NOT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("InnoDB")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DEFAULT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CHARSET")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("utf8mb4 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COLLATE")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("utf8mb4_0900_ai_ci\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("插入三条数据：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" char_test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'😊😊😊😊😊'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" char_test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'😊😊😊😊😊'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INSERT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INTO")]),s._v(" char_test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("values")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'😊😊😊😊'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("blockquote",[t("p",[s._v("😊的十六进制表达为：F0 9F 98 8A")])]),s._v(" "),t("p",[s._v("接下来找到数据文件：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 通过这个命令拿到数据文件所在的目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("show")]),s._v(" variables "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("like")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%datadir%'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("搜索F0 9F 98 8A")]),s._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202312221859370.png",loading:"lazy"}})]),s._v(" "),t("p",[s._v("为了方便你观察，我把它第二条数据和第三条数据单独拎出来看以下：")]),s._v(" "),t("p",[s._v("第二条数据：")]),s._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[s._v("14 0000 1800 2d00 0000 0013 9400 0000 0338 7782 0000 00a4 0110 \n// 5个 F0 9F 98 8A\nf09f 988a f09f 988a f09f 988a f09f 988a f09f 988a\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("第三条数据：")]),s._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[s._v("1000 0020 ff98 0000 0000 1395 0000 0003 387c 8100 0000 a701 10 \n// 4个 F0 9F 98 8A\nf0 9f98 8af0 9f98 8af0 9f98 8af0 9f98 8a\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("看不懂？让我们简单看一下Dynamic行格式的组成（如果了解可以跳过）")]),s._v(" "),t("h4",{attrs:{id:"dynamic行格式的组成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dynamic行格式的组成"}},[s._v("#")]),s._v(" Dynamic行格式的组成")]),s._v(" "),t("h5",{attrs:{id:"_1、变长字段的长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、变长字段的长度"}},[s._v("#")]),s._v(" 1、变长字段的长度")]),s._v(" "),t("p",[s._v("如果变长字段允许存储的最大字节数小于等于 255 字节，就会用 1 字节表示「变长字段长度」；")]),s._v(" "),t("h5",{attrs:{id:"_2、null"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、null"}},[s._v("#")]),s._v(" 2、NULL")]),s._v(" "),t("p",[s._v("因为是非NULL，所以不存在")]),s._v(" "),t("h5",{attrs:{id:"_3、头信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、头信息"}},[s._v("#")]),s._v(" 3、头信息")]),s._v(" "),t("p",[s._v("固定5字节")]),s._v(" "),t("h5",{attrs:{id:"_4、隐式数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、隐式数据"}},[s._v("#")]),s._v(" 4、隐式数据")]),s._v(" "),t("p",[s._v("由于没有指定主键，MySQL隐式生成6个字节的row_id，以及6个字节的trx_id和7个字节的roll_pointer 。")]),s._v(" "),t("h5",{attrs:{id:"_5、实际数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、实际数据"}},[s._v("#")]),s._v(" 5、实际数据")]),s._v(" "),t("p",[s._v("最后就是列的实际值。")]),s._v(" "),t("p",[s._v("整体上看就是下面这样（网上找来的图，侵删）")]),s._v(" "),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://pic.yupi.icu/5563/202312221858319.png",loading:"lazy"}})]),s._v(" "),t("h3",{attrs:{id:"重新审视实验结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重新审视实验结果"}},[s._v("#")]),s._v(" 重新审视实验结果")]),s._v(" "),t("p",[s._v("有了上面的基础，相信大家就能看懂了。")]),s._v(" "),t("p",[s._v("我们观察到第一个位置的14和10，十六进制表达，转为十进制，即为20和16。")]),s._v(" "),t("p",[s._v("隐式主键为 0000 0000 1394 和 0000 0000 1395，后跟13字节的trx_id 和 roll_ptr。实验结果符合理论基础。")]),s._v(" "),t("p",[s._v("至此，我们可以确定：")]),s._v(" "),t("p",[t("strong",[s._v("CHAR也被InnoDB当作变长字段，使用了「行格式中的变长字段长度列表」来表达CHAR的字节长度，即length()函数的返回值。")])]),s._v(" "),t("p",[s._v("因此，现在可以说："),t("strong",[s._v("对于变长字符集，Dynamic行格式的InnoDB，CHAR和VARCHAR的底层存储是一样的。")])]),s._v(" "),t("h4",{attrs:{id:"那性能呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#那性能呢"}},[s._v("#")]),s._v(" 那性能呢")]),s._v(" "),t("p",[s._v("即便底层存储是一样的，也不代表性能一定相同。")]),s._v(" "),t("p",[s._v("经过笔者的可能不太精确的测试，得到的结论是：VARCHAR与CHAR的速度是差不多的。")]),s._v(" "),t("p",[s._v("当然在字节数不同的情况下，二者的性能会各有起伏，但总的来说，十分接近。")]),s._v(" "),t("p",[s._v("感兴趣的读者可以自己尝试一下，需要注意Buffer Pool的存在，由于Buffer Pool的缓存预热功能，可能即便重启MySQL，仍然会有部分数据页存在在Buffer Pool中，并且MySQL8.0并不提供任何能够清空Buffer Pool的命令")]),s._v(" "),t("blockquote",[t("p",[s._v("包括"),t("code",[s._v("innodb_buffer_pool_size")]),s._v("设为0，"),t("code",[s._v("SELECT SQL_NO_CACHE ...")]),s._v("，"),t("code",[s._v("FLUSH TABLES")]),s._v(" 等方案都是不行的")])]),s._v(" "),t("h3",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),t("p",[s._v("在MySQL8.0，使用InnoDB引擎，及Dynamic行格式，并且采取变长字符集时，在存储底层CHAR是变长的。")]),s._v(" "),t("p",[s._v("有时，CHAR占用的实际空间可能不仅会大于VARCHAR，而且在性能上慢于VARCHAR。")]),s._v(" "),t("p",[s._v("因此，在绝大多数情况下，VARCHAR可以替代CHAR。")])])}),[],!1,null,null,null);t.default=e.exports}}]);